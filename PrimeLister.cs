//-----------------------------------------------------------------------
// <copyright file="PrimeLister.cs" company="Joey Woodson">
//     Copyright © 2009 Joey Woodson. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace PrimeNumbers
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Contains methods for listing small numbers of primes.
    /// </summary>
    /// <remarks>
    /// These methods are not optimized for generating large numbers of primes, as their only use in the Deterministic Prime Number Tester is to 
    /// generate a small number (usually under 100) of primes for counters. Using these methods for a large number of primes (over roughly 1 million) 
    /// or calling them a large number (many thousands) of times will result in extreme performance penalites (compared to using a more optimized
    /// algorithm, such as a true Sieve of Eratosthenes).
    /// </remarks>
    public class PrimeLister
    {
        /// <summary>
        /// Contains the primes generated by this <see cref="PrimeLister"/>.
        /// </summary>
        private List<uint> primes;

        /// <summary>
        /// Lists the first <paramref name="numberOfPrimes"/> primes.
        /// </summary>
        /// <param name="numberOfPrimes">The number of primes to generate.</param>
        /// <returns>A uint[] containing the first <paramref name="numberOfPrimes"/> primes.</returns>
        public uint[] ListPrimes(uint numberOfPrimes)
        {
            return this.ListPrimes(numberOfPrimes, false);
        }

        /// <summary>
        /// Lists the first <paramref name="numberOfPrimes"/> primes.
        /// </summary>
        /// <param name="numberOfPrimes">The number of primes to generate.</param>
        /// <param name="excludeTwo">Whether to exclude 2 from the list. This should usually be set to false.</param>
        /// <returns>A uint[] containing the first <paramref name="numberOfPrimes"/> primes.</returns>
        public uint[] ListPrimes(uint numberOfPrimes, bool excludeTwo)
        {
            uint listCount;
            int i;
            this.primes = new List<uint>();
            if (excludeTwo)
            {
                listCount = 1;
                i = 0;
            }
            else
            {
                this.primes.Add(2);
                listCount = 2;
                i = 1;
            }

            this.primes.Add(3);
            uint nextPrime = 3;
            while (true)
            {
                nextPrime += 2;
                while (!this.IsPrime(nextPrime, i))
                {
                    nextPrime += 2;
                }

                if (listCount < numberOfPrimes)
                {
                    this.primes.Add(nextPrime);
                    listCount++;
                }
                else
                {
                    return this.primes.ToArray();
                }
            }
        }

        /// <summary>
        /// Lists all primes up to and including <paramref name="number"/>
        /// </summary>
        /// <param name="number">The maximum number for a prime in the list.</param>
        /// <returns>A uint[] with all primes up to and including <paramref name="number"/>.</returns>
        public uint[] ListPrimesTo(uint number)
        {
            this.primes = new List<uint>();
            uint listCount = 2;
            uint nextPrime = 3;
            this.primes.Add(2);
            this.primes.Add(3);
            while (true)
            {
                nextPrime += 2;
                while (!this.IsPrime(nextPrime, 1))
                {
                    nextPrime += 2;
                }

                if (nextPrime <= number)
                {
                    this.primes.Add(nextPrime);
                    listCount++;
                }
                else
                {
                    return this.primes.ToArray();
                }
            }
        }

        /// <summary>
        /// Tests <paramref name="number"/> for primality.
        /// </summary>
        /// <param name="number">The number to test for primality.</param>
        /// <param name="i">The index of 3 in the primes list. This number is usually 1.</param>
        /// <returns>True if <paramref name="number"/> is prime, otherwise false.</returns>
        private bool IsPrime(uint number, int i)
        {
            int sqrt = (int)Math.Sqrt((double)number);
            while (true)
            {
                if (this.primes[i] > sqrt)
                {
                    return true;
                }

                if (number / this.primes[i] * this.primes[i] == number)
                {
                    return false;
                }

                i++;
            }
        }
    }
}